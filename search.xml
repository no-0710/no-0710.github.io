<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[MongoDB 单节点搭建]]></title>
    <url>%2F2017%2F08%2F20%2Fmongodb-creat%2F</url>
    <content type="text"><![CDATA[1. 单机 MongoDB 安装MongoDB 提供了 linux 各发行版本 64 位的安装包，你可以在官网下载安装包。下载地址：https://www.mongodb.com/download-center?ct=false#community下载完安装包，并解压 tgz（以下演示的是 64 位 ubuntu 上的安装） 12345# 解压 mongoDB 压缩包root@das:/home/software# tar -zxvf mongodb-linux-x86_64-ubuntu1604-3.4.6.tgz -C /home/tools/root@das:/home/software# mv /home/tools/mongodb-linux-x86_64-ubuntu1604-3.4.6/ /home/tools/mongodb-3.4.6# 进入 mongodb 文件夹root@das:/home/software# cd /home/tools/mongodb-3.4.6/ 配置环境变量 /etc/profile 123456# /etc/profile 追加内容 export MONGODB_HOME=/home/tools/mongodb-3.4.6export PATH=$PATH:$MONGODB_HOME/bin# 保存，生效环境source /etc/profile 2. 创建数据库目录12345678910111213141516171819# 创建目录root@das:/home/tools/mongodb-3.4.6# mkdir db logs# 创建配置文件root@das:/home/tools/mongodb-3.4.6/bin# vim mongodb.conf# db pathdbpath = /home/tools/mongodb-3.4.6/db# 日志文件存放的位置logpath = /home/tools/mongodb-3.4.6/logs/mongodb.log# 端口port = 27017# 以守护程序的方式启动，即后台运行fork = true# 日志输出的方式logappend = true# 设置每个数据库将被保存在一个单独的目录中# directoryerdb = true# 开启认证auth = false 3. 启动 mongodb1234root@das:/home/tools/mongodb-3.4.6/bin# ./mongod -f mongodb.conf about to fork child process, waiting until server is ready for connections.forked process: 1011child process started successfully, parent exiting 4. 关闭 mongodb12root@das:/home/tools/mongodb-3.4.6/bin# ./mongod -f mongodb.conf --shutdownkilling process with pid: 1011 5. MongoDB 权限5.1 权限介绍MongoDB安装完成后，默认是不需要输入用户名密码即可登录的，但是往往数据库方面我们会出于安全性的考虑而设置用户名密码，本篇文章主要介绍了MongoDB添加管理员/普通用户的方法。 在我们使用的关系型数据库中，一般都是含有权限控制的，也就是说配置什么用户访问什么数据库，什么数据表，什么用户可以对表进行增删改，什么用户可以对表进行读取等等都是可以配置，那么MongoDB作为一个非关系型数据库的典型，它其实也是可以配置的，而掌握MongoDB的权限我们只需要简单理解下面几点，后面按照下面的几点去配置即可。 MongoDB是没有默认管理员账号的，所以要先添加管理员账号，在开启权限认证。 切换到admin数据库，添加的账号才是管理员的账号。 用户只能在用户所在的数据库登录，包括管理员账号。 管理员可以管理所有的数据库，但是不能直接管理其它数据库，要先在admin数据库中认证才可以，也是为了 安全性考虑。 5.2 权限设置创建一个root用户，并赋予超级管理员权限（root），超级管理员可以管理MongoDB下的所有库以及权限、备份及集群等操作。 123456789root@das:/home/tools/mongodb-3.4.6/bin# ./mongoMongoDB shell version v3.4.6connecting to: mongodb://127.0.0.1:27017MongoDB server version: 3.4.6Welcome to the MongoDB shell.&gt; use adminswitched to db admin&gt; db.createUser(&#123;user:"root",pwd:"123qwe",roles:["root"]&#125;)Successfully added user: &#123; "user" : "root", "roles" : [ "root" ] &#125; 为admin库创建一个admin用户，并赋予管理员权限。 123456789101112&gt; use adminswitched to db admin&gt; db.createUser(&#123;user:"admin",pwd:"admin",roles:[&#123;role:"userAdminAnyDatabase",db:"admin"&#125;]&#125;)Successfully added user: &#123; "user" : "admin", "roles" : [ &#123; "role" : "userAdminAnyDatabase", "db" : "admin" &#125; ]&#125; 新建一个数据库库smaster，给该库添加一个用户sm，密码sm123qwe，并赋予读写及管理员权限。 1234&gt; use smasterswitched to db smaster&gt; db.createUser(&#123;user:"sm",pwd:"sm123qwe",roles:["readWrite","dbAdmin"]&#125;)Successfully added user: &#123; "user" : "sm", "roles" : [ "readWrite", "dbAdmin" ] &#125; 认证创建的用户，此步骤非常重要。认证完成之后，退出shell 1234&gt; db.auth("sm","sm123qwe")1 # 1 - 表示认证成功，0 - 表示失败exitbye 开启验证，重启MongoDB服务。修改配置文件mongodb.conf，添加以下内容auth=true，然后保存。 Python api – pymongo 验证操作集合1234567# 创建链接mongodb_client = MongoClient(host="192.168.7.51", port=27017)mongodb_db = self.mongodb_client["smaster"]# 权限验证if not mongodb_db.authenticate(name="sm", password="sm123qwe"): raise ConnectionError("can't connect to mongodb, please check configure.")mongodb_collection = mongodb_db["proj_infos"]]]></content>
      <categories>
        <category>Code</category>
      </categories>
      <tags>
        <tag>mongoDB</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PyInstaller 打包 Python 程序]]></title>
    <url>%2F2017%2F08%2F20%2FpyInstaller%2F</url>
    <content type="text"><![CDATA[1. Code structure123456789101112131415NodeSlave---|[D] conf # configure folder |--- slave.ini # configure file |---|[D] resource # resource folder |--- node.ico # icon file [ 128*128 ] |---|[D] slave # python package---|[D] build # pyInstaller generate build folder automatically---|[D] dist # pyInstaller generate dist folder automatically |---[D] slave_client # pyInstaller generate program folder |---| slave_client.py # program entrance: main()---| slave_client.spec # pyInstaller spec temporary file---| readme.md # read me file 2. Build executable files 使用 virtualenv 构建纯净的 Python开发环境。 123456# 安装 virtualenv$ pip install virtualenv# 创建一个虚拟环境$ cd D:\Coder\PythonVirtualEnv# 克隆一份Python环境至 D:\Coder\PythonVirtualEnv\venv$ virtualenv venv 在虚拟环境中，使用 pip install xxxx 安装项目依赖。 1234# cmd 执行批处理文件进入虚拟环境 venv$ cd D:\Coder\PythonVirtualEnv$ venv\Scripts\activate.bat(venv) $ pip install kazoo ... 使用 pyInstaller 打包程序。 123456# 在虚拟环境 venv 中执行打包操作(venv) $ cd E:\Coder\SMasterManager\NodeSlave# 执行打包操作(venv) $ pyinstaller --add-data="conf/slave.ini;conf" ^ --icon=resource/node.ico ^ slave_client.py]]></content>
      <categories>
        <category>Code</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>PyInstaller</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[云服务器 ECS Linux SWAP 配置概要说明]]></title>
    <url>%2F2017%2F08%2F20%2Flinux-swap-settings%2F</url>
    <content type="text"><![CDATA[SWAP 简介Linux 中的 SWAP（交换分区），类似于 Windows 的虚拟内存。系统会把一部分硬盘空间虚拟成内存使用，将系统内非活动内存换页到 SWAP，以提高系统可用内存。 开启 SWAP1、创建用于交换分区的文件： 1dd if=/dev/zero of=/mnt/swap bs=block_size count=number_of_block 注：block_size、number_of_block 大小可以自定义，比如 bs=1M count=1024 代表设置 1G 大小 SWAP 分区。交换空间一般是物理内存的2倍或4倍 2、设置交换分区文件： 1mkswap /mnt/swap 3、立即启用交换分区文件 1swapon /mnt/swap 注：如果在 /etc/rc.local 中有 swapoff -a 需要修改为 swapon -a 4、设置开机时自启用 SWAP 分区： 需要修改文件 /etc/fstab 中的 SWAP 行，添加 1/mnt/swap swap swap defaults 0 0 注：/mnt/swap 路径可以修改，可以根据创建的 SWAP 文件具体路径来配置。 5、修改 swpapiness 参数 在 Linux 系统中，可以通过查看 /proc/sys/vm/swappiness 内容的值来确定系统对 SWAP 分区的使用原则。当 swappiness 内容的值为 0 时，表示最大限度地使用物理内存，物理内存使用完毕后，才会使用 SWAP 分区。当 swappiness 内容的值为 100 时，表示积极地使用 SWAP 分区，并且把内存中的数据及时地置换到 SWAP 分区。 查看修改前为 0，需要在物理内存使用完毕后才会使用 SWAP 分区： 可以使用下述方法临时修改此参数，假设我们配置为空闲内存少于 10% 时才使用 SWAP 分区： 1echo 10 &gt;/proc/sys/vm/swappiness 若需要永久修改此配置，在系统重启之后也生效的话，可以修改 /etc/sysctl.conf 文件，并增加以下内容： 1# vim /etc/sysctl.confvm.swappiness=10# sysctl -p 关闭 SWAP当系统出现内存不足时，开启 SWAP 可能会因频繁换页操作，导致 IO 性能下降。如果要关闭 SWAP，可以采用如下方法。 1、free -m 查询 SWAP 分区设置： 2、使用命令 swapoff 关闭 SWAP，比如： 1swapoff /mnt/swap 3、修改 /etc/fstab 文件，删除或注释相关配置，取消 SWAP 的自动挂载： 4、 通过 free -m 确认 SWAP 已经关闭。 5、 swappiness 参数调整： 可以使用下述方法临时修改此参数，这里配置为 0%： 1echo 0 &gt;/proc/sys/vm/swappiness 若需要永久修改此配置，在系统重启之后也生效的话，可以修改 /etc/sysctl.conf 文件，并增加以下内容： 1# vim /etc/sysctl.confvm.swappiness=0# sysctl -p]]></content>
      <categories>
        <category>Code</category>
      </categories>
      <tags>
        <tag>Ubuntu SWAP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[构建 GitLab 服务器 ( Ubuntu 16.04 )]]></title>
    <url>%2F2017%2F08%2F20%2Fbuild-gitlab%2F</url>
    <content type="text"><![CDATA[1. Install and configure the necessary dependenciesIf you install Postfix to send email please select ‘Internet Site’ during setup. Instead of using Postfix you can also use Sendmail or configure a custom SMTP server and configure it as an SMTP server. On CentOS, the commands below will also open HTTP and SSH access in the system firewall. 1sudo apt-get install curl openssh-server ca-certificates postfix -y 2. Add the GitLab package server and install the package12curl -sS https://packages.gitlab.com/install/repositories/gitlab/gitlab-ce/script.deb.sh | sudo bashsudo apt-get install gitlab-ce 3. Configure and start GitLab1sudo gitlab-ctl reconfigure 4. Browse to the hostname and loginOn your first visit, you’ll be redirected to a password reset screen to provide the password for the initial administrator account. Enter your desired password and you’ll be redirected back to the login screen. The default account’s username is root. Provide the password you created earlier and login. After login you can change the username if you wish. 5. Gitlab congfigureAdd the following configuration information to /etc/gitlab/gitlab.rb and run gitlab-ctl reconfigure. 5.1. Configuring the external URL for GitLabIn order for GitLab to display correct repository clone links to your users it needs to know the URL under which it is reached by your users, e.g. http://gitlab.example.com. Add or edit the following line in /etc/gitlab/gitlab.rb: 1external_url "http://xxxx.xx.xxx.xxx" 或者 123external_url "http://xxx.gitlab.com"# 需要设置 hosts# xxxx.xx.xxx.xxx xxx.gitlab.com Run sudo gitlab-ctl reconfigure for the change to take effect. 5.2. Email configure about SMTP当我们需要使用密码找回等邮件提醒服务。需要配置gitlab的配置文件 12345678910111213141516171819# vim /etc/gitlab/gitlab.rbgitlab_rails['time_zone'] = 'Asia/Shanghai'### Email Settingsgitlab_rails['gitlab_email_enabled'] = truegitlab_rails['gitlab_email_from'] = 'xxxxxx@outlook.com'gitlab_rails['gitlab_email_display_name'] = 'xxxooo'### GitLab email server settings# outlook emailgitlab_rails['smtp_enable'] = truegitlab_rails['smtp_address'] = "smtp-mail.outlook.com"gitlab_rails['smtp_port'] = 587gitlab_rails['smtp_user_name'] = "xxxxxx@outlook.com"gitlab_rails['smtp_password'] = "your password"gitlab_rails['smtp_domain'] = "smtp-mail.outlook.com"gitlab_rails['smtp_authentication'] = "login"gitlab_rails['smtp_enable_starttls_auto'] = truegitlab_rails['smtp_openssl_verify_mode'] = 'peer'user['git_user_email'] = "xxxxxx@outlook.com" 5.3. 设置 HTTPS后续补充]]></content>
      <categories>
        <category>Code</category>
      </categories>
      <tags>
        <tag>GitLab</tag>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
</search>
